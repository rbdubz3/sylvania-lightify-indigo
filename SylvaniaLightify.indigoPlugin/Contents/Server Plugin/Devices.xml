<?xml version="1.0"?>
<Devices>
	<!-- Define some devices -->
	<Device type="dimmer" id="lightifyGroupType">
		<Name>Sylvania Lightify Group</Name>
		<ConfigUI>
			<!--
			<Field id="groupName" type="textfield">
				<Label>Enter group name:</Label>
			</Field>
			-->
			<Field id="groupName" type="menu"
				   tooltip="Select an Lightify Group to control.">
				<Label>Choose Lightify Group:</Label>
				<List class="self" method="groupListGenerator"/>
			</Field>
			<Field id="label" type="label" fontSize="small" fontColor="darkgray">
				<Label>This needs to exactly match the name of the group as configured in the Lightify Mobile App.</Label>
			</Field>
			<!-- By default dimmer type devices automatically inherit these
                        device properties which describe the characteristics of a specific
                        dimmer instance:

                                SupportsColor:                                                          True or False
                                -> SupportsRGB:                                                         True or False (requires SupportsColor to be True)
                                -> SupportsWhite:                                                       True or False (requires SupportsColor to be True)
                                   -> SupportsTwoWhiteLevels:                           True or False (requires SupportsWhite to be True)
                                   -> SupportsTwoWhiteLevelsSimultaneously:     True or False (requires SupportsTwoWhiteLevels to be True)
                                   -> SupportsWhiteTemperature:                         True or False (requires SupportsWhite to be True)
                                   -> SupportsRGBandWhiteSimultaneously:        True or False (requires SupportsRGB and SupportsWhite to be True)

                        Plugins can update these properties either in device ConfigUI
                        (like below), or can update them from python by using the
                        dev.replacePluginPropsOnServer() method, most likely inside your
                        deviceStartComm method. Both will trigger the Indigo Server to
                        automatically rebuild the device's states list based on the needed
                        changes.

                        Two white level fields (SupportsTwoWhiteLevels) is used by some hardware
                        to mix cool and warm white levels. Other hardware provides this capability                        by using a white temperature value (SupportsWhiteTemperature). The two                        techniques are mutually exlcusive, so choosing to enable two white levels
                        will override (and not show) the white temperature UI.
                        -->                        
			<Field type="separator" id="simpleSeparator1" />
			<Field type="checkbox" id="SupportsRGB" defaultValue="true">
				<Label>Supports RGB:</Label>
				<Description>Shows RGB control and level fields in UI</Description>
			</Field>
			<Field type="separator" id="simpleSeparator2" />
			<Field type="checkbox" id="SupportsWhite" defaultValue="true">
				<Label>Supports White:</Label>
				<Description>Shows White level fields in UI</Description>
			</Field>
			<Field type="checkbox" id="SupportsTwoWhiteLevels" defaultValue="false" enabledBindingId="SupportsWhite">
				<Label>Supports White 2:</Label>
				<Description>Shows Two White level fields in UI</Description>
			</Field>
			<Field type="label" id="whiteInfoField" fontColor="darkgray" fontSize="small">
				<Label>Two white level fields are used by some hardware to mix cool and warm white levels. Other hardware provides this capability by using a white temperature value. The two techniques are mutually exlcusive, so choosing to enable two white levels will override (and not show) the white temperature UI.</Label>
			</Field>
			<Field type="checkbox" id="SupportsWhiteTemperature" defaultValue="false" enabledBindingId="SupportsWhite" visibleBindingId="SupportsTwoWhiteLevels" visibleBindingValue="false" alwaysUseInDialogHeightCalc="true">
				<Label>Supports White Temp:</Label>
				<Description>Shows White Temperature field in UI</Description>
			</Field>
		</ConfigUI>
		<States>
			<State id="activeScene">
				<ValueType>String</ValueType>
				<TriggerLabel>activeScene</TriggerLabel>
				<ControlPageLabel>activeScene</ControlPageLabel>
			</State>
		</States>
	</Device>
</Devices>
